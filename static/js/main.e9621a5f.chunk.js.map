{"version":3,"sources":["index.js"],"names":["cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","concat","render","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_useState","useState","Set","gone","Object","_home_seymur_Desktop_Projects_animated_cards_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_useSprings","useSprings","length","_home_seymur_Desktop_Projects_animated_cards_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","_ref2","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","key","style","transform","interpolate","assign","backgroundImage","document","getElementById"],"mappings":"uJAOMA,SAAQ,CACZ,qGACA,6GACA,qGACA,mGACA,uEACA,iFAIIC,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAC9EQ,EAAO,SAAAR,GAAC,MAAK,CAAEC,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,MAE7CO,EAAQ,SAACC,EAAGC,GAAJ,oDAAAC,OAAwDF,EAAI,GAA5D,iBAAAE,OAA8EF,EAA9E,eAAAE,OAA6FD,EAA7F,MA6BdE,iBAAOC,EAAAC,EAAAC,cA3BP,WAAgB,IAAAC,EACCC,mBAAS,kBAAM,IAAIC,MAA3BC,EADOC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,MAAAM,EAEOC,YAAW1B,EAAM2B,OAAQ,SAAAzB,GAAC,OAAAqB,OAAAK,EAAA,EAAAL,CAAA,GAAUtB,EAAGC,GAAb,CAAiBQ,KAAMA,EAAKR,OAF7D2B,EAAAN,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEPK,EAFOD,EAAA,GAEAE,EAFAF,EAAA,GAIRG,EAAOC,YAAW,SAAAC,GAAqF,IAA3EC,EAA2EZ,OAAAC,EAAA,EAAAD,CAAAW,EAAlFE,KAAkF,MAAnEC,EAAmEH,EAAnEG,KAAcC,EAAqDf,OAAAC,EAAA,EAAAD,CAAAW,EAA7DK,MAA6D,MAAtBC,GAAsBN,EAA5CO,SAA4ClB,OAAAC,EAAA,EAAAD,CAAAW,EAAlCQ,UAAkC,OAAfC,EAAeT,EAAfS,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELrB,EAAKuB,IAAIV,GAC/BJ,EAAI,SAAA7B,GACF,GAAIiC,IAAUjC,EAAd,CACA,IAAM4C,EAASxB,EAAKyB,IAAIZ,GAIxB,MAAO,CAAEhC,EAHC2C,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzDhC,IAFAgC,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1CtC,MADHgC,EAAO,IAAM,EACH5B,WAAOyC,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,SAEpGT,GAAQf,EAAKgC,OAAStD,EAAM2B,QAAQ4B,WAAW,kBAAMjC,EAAKkC,SAAWzB,EAAI,SAAA7B,GAAC,OAAID,EAAGC,MAAK,OAG7F,OAAO4B,EAAM2B,IAAI,SAAAC,EAAuBxD,GAAvB,IAAGC,EAAHuD,EAAGvD,EAAGC,EAANsD,EAAMtD,EAAGE,EAAToD,EAASpD,IAAKD,EAAdqD,EAAcrD,MAAd,OACfW,EAAAC,EAAAC,cAACyC,EAAA,EAASC,IAAV,CAAcC,IAAK3D,EAAG4D,MAAO,CAAEC,UAAWC,YAAY,CAAC7D,EAAGC,GAAI,SAACD,EAAGC,GAAJ,qBAAAU,OAAyBX,EAAzB,OAAAW,OAAgCV,EAAhC,aAE5DY,EAAAC,EAAAC,cAACyC,EAAA,EAASC,IAAVrC,OAAA0C,OAAA,GAAkBjC,EAAK9B,GAAvB,CAA2B4D,MAAO,CAAEC,UAAWC,YAAY,CAAC1D,EAAKD,GAAQM,GAAQuD,gBAAe,OAAApD,OAASd,EAAME,GAAf,aAK/F,MAAUiE,SAASC,eAAe","file":"static/js/main.e9621a5f.chunk.js","sourcesContent":["import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport './styles.css'\n\n\nconst cards = [\n  'http://www.3coast.com/wp-content/uploads/2013/09/bigstock__D_Human_And_Blue_Question_MarSMALL1.jpg',\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSBSLynCpGAscuhL6RjvqUXp7s1yNPT3Pin3YLkGytw41n6QkdjVg',\n  'https://www.fastweb.com/uploads/article_photo/photo/2035804/crop635w_college-choice-questions2.jpg',\n  'https://www.wamc.org/sites/wamc/files/styles/x_large/public/201611/anyquestionslogo-finalred.png',\n  'https://camdenkelly.com/wp-content/uploads/2019/04/question-mark.png',\n  'https://cdn.pixabay.com/photo/2015/10/30/12/24/questions-1014060_960_720.jpg'\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}\n\nrender(<Deck />, document.getElementById('root'))\n"],"sourceRoot":""}