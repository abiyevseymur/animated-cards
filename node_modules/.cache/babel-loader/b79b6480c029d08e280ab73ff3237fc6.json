{"ast":null,"code":"import _toConsumableArray from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar noop = function noop() {};\n\nvar stateKeys = {\n  onDrag: 'drag',\n  onHover: 'move',\n  onMove: 'move',\n  onPinch: 'pinch',\n  onScroll: 'scroll',\n  onWheel: 'wheel'\n};\nvar defaultConfig = {\n  domTarget: undefined,\n  event: {\n    passive: true,\n    capture: false,\n    pointerEvents: false\n  },\n  window: typeof window !== 'undefined' ? window : undefined,\n  transform: {\n    x: function x(_x) {\n      return _x;\n    },\n    y: function y(_y) {\n      return _y;\n    }\n  },\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true\n};\nvar initialCommon = {\n  event: undefined,\n  delta: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  transform: undefined,\n  local: [0, 0],\n  lastLocal: [0, 0],\n  first: true,\n  last: false,\n  active: true,\n  time: undefined,\n  temp: undefined,\n  cancel: noop,\n  canceled: false,\n  args: undefined\n};\nvar initialXY = {\n  xy: [0, 0],\n  velocity: 0,\n  vxvy: [0, 0],\n  distance: 0,\n  direction: [0, 0] // xy coordinates\n\n};\nvar initialDA = {\n  da: [0, 0],\n  vdva: [0, 0],\n  turns: 0 // distance and angle\n\n};\nvar initialState = {\n  shared: {\n    hovering: undefined,\n    scrolling: undefined,\n    dragging: undefined,\n    moving: undefined,\n    pinching: undefined,\n    touches: undefined,\n    down: undefined,\n    shiftKey: undefined,\n    altKey: undefined,\n    metaKey: undefined,\n    ctrlKey: undefined\n  },\n  move: _extends({}, initialCommon, initialXY),\n  drag: _extends({}, initialCommon, initialXY),\n  scroll: _extends({}, initialCommon, initialXY),\n  wheel: _extends({}, initialCommon, initialXY),\n  pinch: _extends({}, initialCommon, initialDA)\n};\nvar genericEndState = {\n  first: false,\n  last: true,\n  active: false\n};\n\nfunction useGesture(props, config) {\n  if (typeof props === 'function') props = {\n    onDrag: props\n  };\n\n  if (props.onAction) {\n    props.onDrag = props.onAction;\n  }\n\n  config = _extends({}, defaultConfig, props.config, config);\n  var propsRef = React.useRef(props);\n  var configRef = React.useRef(config);\n  React.useEffect(function () {\n    propsRef.current = props;\n    configRef.current = config;\n  }, [props, config]);\n  var state = React.useRef(initialState);\n  var timeouts = React.useRef({});\n  var domListeners = React.useRef([]);\n  var dragListeners = React.useRef([]);\n  var clean = React.useCallback(function () {\n    clearTimeouts(timeouts.current);\n    var domTarget = configRef.current.domTarget;\n    var realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget;\n    removeListeners(realDomTarget, domListeners.current, configRef.current.event);\n    removeListeners(configRef.current.window, dragListeners.current, configRef.current.event);\n  }, []);\n  React.useEffect(function () {\n    return clean;\n  }, [clean]);\n\n  var _React$useState = React.useState(function () {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return handlers(args);\n    };\n  }),\n      bind = _React$useState[0];\n\n  return bind;\n  /*** HANDLERS ***/\n\n  function handlers(args) {\n    var _configRef$current = configRef.current,\n        domTarget = _configRef$current.domTarget,\n        pointerEvents = _configRef$current.event.pointerEvents;\n    var actions = new Set(Object.keys(props).filter(function (k) {\n      return k.indexOf('on') === 0;\n    }).map(function (k) {\n      return k.match(/(on[A-Z][a-z]+)/)[1];\n    }));\n\n    var updateState = function updateState(newState) {\n      var updatedState = Object.entries(newState).reduce(function (acc, _ref) {\n        var k = _ref[0],\n            v = _ref[1];\n        return _extends({}, acc, _defineProperty({}, k, _extends({}, state.current[k], v)));\n      }, {});\n      state.current = _extends({}, state.current, updatedState);\n    };\n\n    var getGenericStartState = function getGenericStartState(event, stateKey, xy) {\n      var transform = state.current[stateKey].transform || event.transform || configRef.current.transform;\n      var lastLocal = state.current[stateKey].local || initialState[stateKey].local;\n      return _extends({}, initialState[stateKey], {\n        xy: xy,\n        initial: xy,\n        previous: xy,\n        first: true,\n        local: lastLocal,\n        lastLocal: lastLocal,\n        transform: transform,\n        time: event.timeStamp,\n        args: args\n      });\n    };\n\n    var getKinematics = function getKinematics(mov_x, mov_y, event, stateKey, isDelta) {\n      if (isDelta === void 0) {\n        isDelta = false;\n      }\n\n      var lastLocal = state.current[stateKey].lastLocal || initialState[stateKey].lastLocal;\n      var _state$current$stateK = state.current[stateKey],\n          xy = _state$current$stateK.xy,\n          initial = _state$current$stateK.initial,\n          delta = _state$current$stateK.delta,\n          time = _state$current$stateK.time,\n          transform = _state$current$stateK.transform;\n      var t = transform || event.transform || configRef.current.transform;\n      var delta_t = event.timeStamp - time;\n      var x = isDelta ? mov_x + xy[0] : mov_x;\n      var y = isDelta ? mov_y + xy[1] : mov_y;\n      var delta_x = t.x(isDelta ? mov_x + delta[0] : x - initial[0]);\n      var delta_y = t.y(isDelta ? mov_y + delta[1] : y - initial[1]);\n      var x_dist = t.x(x - xy[0]);\n      var y_dist = t.y(y - xy[1]);\n      var len = Math.hypot(x_dist, y_dist);\n      var scalar = 1 / (len || 1);\n      var local_x = lastLocal[0] + delta_x;\n      var local_y = lastLocal[1] + delta_y;\n      return {\n        xy: [x, y],\n        delta: [delta_x, delta_y],\n        velocity: delta_t ? len / delta_t : 0,\n        vxvy: [delta_t ? x_dist / delta_t : 0, delta_t ? y_dist / delta_t : 0],\n        distance: Math.hypot(delta_x, delta_y),\n        direction: [x_dist * scalar, y_dist * scalar],\n        local: [local_x, local_y],\n        previous: xy,\n        transform: transform,\n        time: event.timeStamp\n      };\n    };\n\n    var handleGesture = function handleGesture(action) {\n      var stateKey = stateKeys[action];\n\n      var actionState = _extends({}, state.current.shared, state.current[stateKey]);\n\n      if (propsRef.current[action]) {\n        state.current[stateKey].temp = propsRef.current[action](actionState) || state.current[stateKey].temp;\n      }\n    };\n\n    var handleGestureStart = function handleGestureStart(action) {\n      var stateKey = stateKeys[action];\n\n      var actionState = _extends({}, state.current.shared, state.current[stateKey]);\n\n      var actionStart = action + \"Start\";\n      propsRef.current[actionStart] && propsRef.current[actionStart](actionState);\n\n      if (propsRef.current[action]) {\n        state.current[stateKey].temp = propsRef.current[action](actionState) || state.current[stateKey].temp;\n      }\n    };\n\n    var handleGestureEnd = function handleGestureEnd(action, callDefaultAction) {\n      if (callDefaultAction === void 0) {\n        callDefaultAction = true;\n      }\n\n      var stateKey = stateKeys[action];\n\n      var actionState = _extends({}, state.current.shared, state.current[stateKey]);\n\n      if (callDefaultAction && propsRef.current[action]) {\n        state.current[stateKey].temp = propsRef.current[action](actionState) || state.current[stateKey].temp;\n      }\n\n      var actionEnd = action + \"End\";\n      propsRef.current[actionEnd] && propsRef.current[actionEnd](actionState);\n    };\n\n    var onDragStart = function onDragStart(event) {\n      if (!configRef.current.enabled || !configRef.current.drag) return;\n\n      var _getPointerEventData = getPointerEventData(event),\n          mov_x = _getPointerEventData.mov_x,\n          mov_y = _getPointerEventData.mov_y,\n          rest = _objectWithoutPropertiesLoose(_getPointerEventData, [\"mov_x\", \"mov_y\"]); // making sure we're not dragging the element when more than one finger press the screen\n\n\n      if (rest.touches > 1) return;\n      var currentTarget = event.currentTarget,\n          pointerId = event.pointerId;\n\n      if (pointerEvents) {\n        currentTarget.setPointerCapture(pointerId);\n      } else {\n        dragListeners.current = [];\n        dragListeners.current.push(['mousemove', onDragMove]);\n        dragListeners.current.push(['mouseup', onDragEnd]);\n        dragListeners.current.push(['touchmove', onDragMove]);\n        dragListeners.current.push(['touchend', onDragEnd]);\n        dragListeners.current.push(['touchcancel', onDragEnd]);\n        addListeners(configRef.current.window, dragListeners.current, configRef.current.event);\n      }\n\n      var startState = getGenericStartState(event, 'drag', [mov_x, mov_y]);\n      updateState({\n        shared: _extends({}, rest, {\n          dragging: true,\n          down: true\n        }),\n        drag: _extends({}, startState, {\n          event: event,\n          currentTarget: currentTarget,\n          pointerId: pointerId,\n          cancel: function cancel() {\n            return cancelDrag(event);\n          }\n        })\n      });\n      handleGestureStart('onDrag');\n    };\n\n    var onDragEnd = function onDragEnd(event, canceled) {\n      if (canceled === void 0) {\n        canceled = false;\n      }\n\n      if (!state.current.shared.dragging) return;\n      var _state$current$drag = state.current.drag,\n          currentTarget = _state$current$drag.currentTarget,\n          pointerId = _state$current$drag.pointerId;\n\n      if (pointerEvents) {\n        currentTarget.releasePointerCapture(pointerId);\n      } else {\n        removeListeners(configRef.current.window, dragListeners.current, configRef.current.event);\n      }\n\n      updateState({\n        shared: {\n          dragging: false,\n          down: false,\n          touches: 0\n        },\n        drag: _extends({}, genericEndState, {\n          event: event,\n          cancel: noop,\n          canceled: canceled\n        })\n      });\n      handleGestureEnd('onDrag');\n    };\n\n    var onDragMove = function onDragMove(event) {\n      if (state.current.drag.canceled || !state.current.shared.dragging) return;\n\n      var _getPointerEventData2 = getPointerEventData(event),\n          mov_x = _getPointerEventData2.mov_x,\n          mov_y = _getPointerEventData2.mov_y,\n          rest = _objectWithoutPropertiesLoose(_getPointerEventData2, [\"mov_x\", \"mov_y\"]);\n\n      var kinematics = getKinematics(mov_x, mov_y, event, 'drag');\n\n      var cancel = function cancel() {\n        return cancelDrag(event);\n      };\n\n      updateState({\n        shared: _extends({\n          moving: true\n        }, rest),\n        drag: _extends({}, kinematics, {\n          first: false,\n          event: event,\n          cancel: cancel\n        })\n      });\n      handleGesture('onDrag');\n    };\n\n    var cancelDrag = function cancelDrag(event) {\n      return requestAnimationFrame(function () {\n        return onDragEnd(event, true);\n      });\n    };\n\n    var onPinchStart = function onPinchStart(event) {\n      if (!configRef.current.enabled || !configRef.current.pinch || event.touches.length !== 2) return;\n      var dx = event.touches[1].clientX - event.touches[0].clientX;\n      var dy = event.touches[1].clientY - event.touches[0].clientY;\n      var lastLocal = state.current.pinch.local || initialState.pinch.local;\n      var transform = state.current.pinch.transform || event.transform || configRef.current.transform;\n      var da = [Math.hypot(dx, dy), Math.atan2(dx, dy) * 180 / Math.PI];\n\n      var startState = _extends({}, initialState.pinch, {\n        da: da,\n        initial: da,\n        previous: da,\n        first: true,\n        local: lastLocal,\n        lastLocal: lastLocal,\n        transform: transform,\n        time: event.timeStamp\n      });\n\n      updateState({\n        shared: {\n          pinching: true,\n          down: true,\n          touches: 2\n        },\n        pinch: _extends({\n          da: [0, 0]\n        }, startState, {\n          event: event,\n          cancel: function cancel() {\n            return cancelPinch(event);\n          }\n        })\n      });\n      handleGestureStart('onPinch');\n    };\n\n    var onPinchEnd = function onPinchEnd(event, canceled) {\n      if (canceled === void 0) {\n        canceled = false;\n      }\n\n      if (!state.current.shared.pinching) return;\n      updateState({\n        shared: {\n          pinching: false,\n          down: false,\n          touches: 0\n        },\n        pinch: _extends({}, genericEndState, {\n          event: event,\n          cancel: noop,\n          canceled: canceled\n        })\n      });\n      handleGestureEnd('onPinch');\n    };\n\n    var onPinchMove = function onPinchMove(event) {\n      if (state.current.pinch.canceled || event.touches.length !== 2) return;\n      var _state$current$pinch = state.current.pinch,\n          da = _state$current$pinch.da,\n          turns = _state$current$pinch.turns,\n          initial = _state$current$pinch.initial,\n          lastLocal = _state$current$pinch.lastLocal,\n          time = _state$current$pinch.time;\n      var dx = event.touches[1].clientX - event.touches[0].clientX;\n      var dy = event.touches[1].clientY - event.touches[0].clientY;\n      var d = Math.hypot(dx, dy);\n      var a = Math.atan2(dx, dy) * 180 / Math.PI;\n      var d_dist = d - da[0];\n      var a_dist = a - da[1];\n      var newTurns = Math.abs(a_dist) > 300 ? turns + Math.sign(a_dist) : turns;\n      var delta_t = event.timeStamp - time;\n      var delta_d = Math.hypot(dx, dy) - initial[0];\n      var delta_a = initial[1] - a + 360 * newTurns;\n      var local_d = lastLocal[0] + delta_d;\n      var local_a = lastLocal[1] + delta_a;\n\n      var cancel = function cancel() {\n        return cancelPinch(event);\n      };\n\n      updateState({\n        pinch: {\n          da: [d, a],\n          delta: [delta_d, delta_a],\n          vdva: [delta_t ? d_dist / delta_t : 0, delta_t ? a_dist / delta_t : 0],\n          turns: newTurns,\n          previous: da,\n          first: false,\n          local: [local_d, local_a],\n          event: event,\n          time: event.timeStamp,\n          cancel: cancel\n        }\n      });\n      handleGesture('onPinch');\n    };\n\n    var cancelPinch = function cancelPinch(event) {\n      return requestAnimationFrame(function () {\n        return onPinchEnd(event, true);\n      });\n    };\n\n    var onMoveEnd = function onMoveEnd() {\n      if (!state.current.shared.moving) return;\n      updateState({\n        shared: {\n          moving: false\n        },\n        move: _extends({}, genericEndState, {\n          velocity: 0,\n          vxvy: [0, 0]\n        })\n      });\n      handleGestureEnd('onMove');\n    };\n\n    var onMove = function onMove(event) {\n      if (!configRef.current.enabled || !configRef.current.move) return;\n      clearTimeout(timeouts.current.move);\n      timeouts.current.move = setTimeout(onMoveEnd, 100);\n\n      var _getPointerEventData3 = getPointerEventData(event),\n          mov_x = _getPointerEventData3.mov_x,\n          mov_y = _getPointerEventData3.mov_y,\n          rest = _objectWithoutPropertiesLoose(_getPointerEventData3, [\"mov_x\", \"mov_y\"]);\n\n      if (!state.current.shared.moving) {\n        var startState = getGenericStartState(event, 'move', [mov_x, mov_y]);\n        updateState({\n          shared: _extends({\n            moving: true\n          }, rest),\n          move: _extends({}, startState, {\n            event: event\n          })\n        });\n        return handleGestureStart('onMove');\n      }\n\n      var kinematics = getKinematics(mov_x, mov_y, event, 'move');\n      updateState({\n        shared: rest,\n        move: _extends({}, kinematics, {\n          first: false,\n          event: event\n        })\n      });\n      handleGesture('onMove');\n    };\n\n    var onScrollEnd = function onScrollEnd() {\n      updateState({\n        shared: {\n          scrolling: false\n        },\n        scroll: _extends({}, genericEndState, {\n          velocity: 0,\n          vxvy: [0, 0]\n        })\n      });\n      handleGestureEnd('onScroll');\n    };\n\n    var onScroll = function onScroll(event) {\n      if (!configRef.current.enabled || !configRef.current.scroll) return;\n      clearTimeout(timeouts.current.scroll);\n      timeouts.current.scroll = setTimeout(onScrollEnd, 100);\n\n      var _getScrollEventData = getScrollEventData(event),\n          mov_x = _getScrollEventData.mov_x,\n          mov_y = _getScrollEventData.mov_y;\n\n      if (!state.current.shared.scrolling) {\n        var startState = getGenericStartState(event, 'scroll', [mov_x, mov_y]);\n        updateState({\n          shared: {\n            scrolling: true\n          },\n          scroll: _extends({}, startState, {\n            event: event\n          })\n        });\n        return handleGestureStart('onScroll');\n      }\n\n      var kinematics = getKinematics(mov_x, mov_y, event, 'scroll');\n      updateState({\n        scroll: _extends({}, kinematics, {\n          first: false,\n          event: event\n        })\n      });\n      handleGesture('onScroll');\n    };\n\n    var onWheelEnd = function onWheelEnd() {\n      updateState({\n        shared: {\n          wheeling: false\n        },\n        wheel: _extends({}, genericEndState, {\n          velocity: 0,\n          vxvy: [0, 0]\n        })\n      });\n      handleGestureEnd('onWheel');\n    };\n\n    var onWheel = function onWheel(event) {\n      if (!configRef.current.enabled || !configRef.current.wheel) return;\n      clearTimeout(timeouts.current.wheel);\n      timeouts.current.wheel = setTimeout(onWheelEnd, 100);\n\n      var _getWheelEventData = getWheelEventData(event),\n          mov_x = _getWheelEventData.mov_x,\n          mov_y = _getWheelEventData.mov_y;\n\n      if (!state.current.shared.wheeling) {\n        var startState = getGenericStartState(event, 'wheel', [mov_x, mov_y]);\n        updateState({\n          shared: {\n            wheeling: true\n          },\n          wheel: _extends({}, startState, {\n            event: event\n          })\n        });\n        return handleGestureStart('onWheel');\n      }\n\n      var kinematics = getKinematics(mov_x, mov_y, event, 'wheel', true);\n      updateState({\n        wheel: _extends({}, kinematics, {\n          first: false,\n          event: event\n        })\n      });\n      handleGesture('onWheel');\n    };\n\n    var onEnter = function onEnter(event) {\n      if (!configRef.current.enabled || !configRef.current.hover) return;\n\n      var _getPointerEventData4 = getPointerEventData(event),\n          mov_x = _getPointerEventData4.mov_x,\n          mov_y = _getPointerEventData4.mov_y,\n          down = _getPointerEventData4.down,\n          touches = _getPointerEventData4.touches,\n          shiftKey = _getPointerEventData4.shiftKey;\n\n      updateState({\n        shared: {\n          hovering: true,\n          down: down,\n          touches: touches,\n          shiftKey: shiftKey\n        },\n        move: {\n          xy: [mov_x, mov_y],\n          active: true,\n          event: event\n        }\n      });\n      handleGesture('onHover');\n    };\n\n    var onLeave = function onLeave(event) {\n      if (!configRef.current.enabled || !configRef.current.hover) return;\n\n      var _getPointerEventData5 = getPointerEventData(event),\n          mov_x = _getPointerEventData5.mov_x,\n          mov_y = _getPointerEventData5.mov_y,\n          down = _getPointerEventData5.down,\n          touches = _getPointerEventData5.touches,\n          shiftKey = _getPointerEventData5.shiftKey;\n\n      var kinematics = getKinematics(mov_x, mov_y, event, 'move');\n      updateState({\n        shared: {\n          hovering: false,\n          moving: false,\n          down: down,\n          touches: touches,\n          shiftKey: shiftKey\n        },\n        move: _extends({}, kinematics, genericEndState, {\n          event: event\n        })\n      });\n      handleGestureEnd('onMove');\n      handleGesture('onHover');\n    };\n\n    var output = {};\n    var capture = configRef.current.event.capture ? 'Capture' : '';\n    var listeners = {};\n\n    if (actions.has('onMove')) {\n      pushEventProp(listeners, pointerEvents ? 'onPointerMove' : 'onMouseMove', onMove);\n    }\n\n    if (actions.has('onDrag')) {\n      if (pointerEvents) {\n        pushEventProp(listeners, 'onPointerDown', onDragStart);\n        pushEventProp(listeners, 'onPointerMove', onDragMove);\n        pushEventProp(listeners, ['onPointerUp', 'onPointerCancel'], onDragEnd);\n      } else {\n        pushEventProp(listeners, ['onMouseDown', 'onTouchStart'], onDragStart);\n      }\n    }\n\n    if (actions.has('onPinch')) {\n      pushEventProp(listeners, 'onTouchStart', onPinchStart);\n      pushEventProp(listeners, 'onTouchMove', onPinchMove);\n      pushEventProp(listeners, ['onTouchEnd', 'onTouchCancel'], onPinchEnd);\n    }\n\n    if (actions.has('onHover')) {\n      pushEventProp(listeners, pointerEvents ? 'onPointerEnter' : 'onMouseEnter', onEnter);\n      pushEventProp(listeners, pointerEvents ? 'onPointerLeave' : 'onMouseLeave', onLeave);\n    }\n\n    if (actions.has('onScroll')) {\n      pushEventProp(listeners, 'onScroll', onScroll);\n    }\n\n    if (actions.has('onWheel')) {\n      pushEventProp(listeners, 'onWheel', onWheel);\n    }\n\n    if (domTarget) {\n      domListeners.current = [];\n      var realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget;\n      Object.entries(listeners).forEach(function (_ref2) {\n        var k = _ref2[0],\n            fns = _ref2[1];\n        return domListeners.current.push([k.substr(2).toLowerCase(), chain.apply(void 0, _toConsumableArray(fns))]);\n      });\n      addListeners(realDomTarget, domListeners.current, configRef.current.event);\n      return clean;\n    }\n\n    Object.entries(listeners).forEach(function (_ref3) {\n      var k = _ref3[0],\n          fns = _ref3[1];\n      return output[k + capture] = chain.apply(void 0, _toConsumableArray(fns));\n    });\n    return output;\n  }\n}\n/*** UTILS ***/\n\n\nvar chain = function chain() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return fns.forEach(function (a) {\n      return a.apply(void 0, args);\n    });\n  };\n};\n\nvar pushEventProp = function pushEventProp(l, keys, fn) {\n  if (!Array.isArray(keys)) keys = [keys];\n  keys.forEach(function (key) {\n    return l[key] = l[key] ? [].concat(_toConsumableArray(l[key]), [fn]) : [fn];\n  });\n};\n\nvar clearTimeouts = function clearTimeouts(timeouts) {\n  return Object.values(timeouts).forEach(clearTimeout);\n};\n\nvar setListeners = function setListeners(add) {\n  return function (el, listeners, options) {\n    var action = add ? 'addEventListener' : 'removeEventListener';\n    listeners.forEach(function (_ref4) {\n      var type = _ref4[0],\n          fn = _ref4[1];\n      return el[action](type, fn, options);\n    });\n  };\n};\n\nvar addListeners = setListeners(true);\nvar removeListeners = setListeners(false);\n\nfunction getScrollEventData(event) {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  var _event$currentTarget = event.currentTarget,\n      scrollX = _event$currentTarget.scrollX,\n      scrollY = _event$currentTarget.scrollY,\n      scrollLeft = _event$currentTarget.scrollLeft,\n      scrollTop = _event$currentTarget.scrollTop;\n  return {\n    mov_x: scrollX || scrollLeft || 0,\n    mov_y: scrollY || scrollTop || 0\n  };\n}\n\nfunction getWheelEventData(event) {\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return {\n    mov_x: event.deltaX,\n    mov_y: event.deltaY\n  };\n}\n\nfunction getPointerEventData(event) {\n  var touches = event.touches,\n      changedTouches = event.changedTouches,\n      shiftKey = event.shiftKey,\n      altKey = event.altKey,\n      metaKey = event.metaKey,\n      ctrlKey = event.ctrlKey;\n  var touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null;\n\n  var _ref5 = touchEvents ? touchEvents[0] : event,\n      mov_x = _ref5.clientX,\n      mov_y = _ref5.clientY,\n      buttons = _ref5.buttons;\n\n  var down = touchEvents && touchEvents.length > 0 || buttons % 2 === 1; // makes sure main button is pressed\n\n  return {\n    mov_x: mov_x,\n    mov_y: mov_y,\n    touches: touchEvents && touchEvents.length || 0,\n    down: down,\n    shiftKey: shiftKey,\n    altKey: altKey,\n    metaKey: metaKey,\n    ctrlKey: ctrlKey\n  };\n}\n\nexport { useGesture };","map":null,"metadata":{},"sourceType":"module"}