{"ast":null,"code":"import _defineProperty from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _possibleConstructorReturn from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/home/seymur/snap/Desktop/Projects/j0y0vpz59/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport React, { useState, useCallback, useRef, forwardRef, useEffect, useImperativeHandle, useMemo } from 'react';\nvar is = {\n  arr: Array.isArray,\n  obj: function obj(a) {\n    return Object.prototype.toString.call(a) === '[object Object]';\n  },\n  fun: function fun(a) {\n    return typeof a === 'function';\n  },\n  str: function str(a) {\n    return typeof a === 'string';\n  },\n  num: function num(a) {\n    return typeof a === 'number';\n  },\n  und: function und(a) {\n    return a === void 0;\n  },\n  nul: function nul(a) {\n    return a === null;\n  },\n  boo: function boo(a) {\n    return typeof a === 'boolean';\n  },\n  set: function set(a) {\n    return a instanceof Set;\n  },\n  map: function map(a) {\n    return a instanceof Map;\n  },\n  equ: function equ(a, b) {\n    if (typeof a !== typeof b) return false;\n    if (is.str(a) || is.num(a)) return a === b;\n    if (is.obj(a) && is.obj(b) && Object.keys(a).length + Object.keys(b).length === 0) return true;\n    var i;\n\n    for (i in a) {\n      if (!(i in b)) return false;\n    }\n\n    for (i in b) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return is.und(i) ? a === b : true;\n  }\n};\n\nfunction useForceUpdate() {\n  var _useState = useState(false),\n      f = _useState[1];\n\n  var forceUpdate = useCallback(function () {\n    return f(function (v) {\n      return !v;\n    });\n  }, []);\n  return forceUpdate;\n}\n\nfunction withDefault(value, defaultValue) {\n  return is.und(value) || is.nul(value) ? defaultValue : value;\n}\n\nfunction toArray(a) {\n  return !is.und(a) ? is.arr(a) ? a : [a] : [];\n}\n\nfunction callProp(obj) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(obj) ? obj.apply(void 0, args) : obj;\n}\n\nfunction getForwardProps(props) {\n  var to = props.to,\n      from = props.from,\n      config = props.config,\n      onStart = props.onStart,\n      onRest = props.onRest,\n      onFrame = props.onFrame,\n      children = props.children,\n      cancel = props.cancel,\n      reset = props.reset,\n      reverse = props.reverse,\n      force = props.force,\n      immediate = props.immediate,\n      delay = props.delay,\n      attach = props.attach,\n      destroyed = props.destroyed,\n      interpolateTo = props.interpolateTo,\n      ref = props.ref,\n      lazy = props.lazy,\n      forward = _objectWithoutPropertiesLoose(props, [\"to\", \"from\", \"config\", \"onStart\", \"onRest\", \"onFrame\", \"children\", \"cancel\", \"reset\", \"reverse\", \"force\", \"immediate\", \"delay\", \"attach\", \"destroyed\", \"interpolateTo\", \"ref\", \"lazy\"]);\n\n  return forward;\n}\n\nfunction interpolateTo(props) {\n  var forward = getForwardProps(props);\n  props = Object.entries(props).reduce(function (props, _ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return key in forward || (props[key] = value), props;\n  }, {});\n  return _extends({\n    to: forward\n  }, props);\n}\n\nfunction handleRef(ref, forward) {\n  if (forward) {\n    // If it's a function, assume it's a ref callback\n    if (is.fun(forward)) forward(ref);else if (is.obj(forward)) {\n      forward.current = ref;\n    }\n  }\n\n  return ref;\n}\n/** Use a value from the previous render */\n\n\nfunction usePrev(value) {\n  var prevRef = useRef(undefined);\n  var prev = prevRef.current;\n  prevRef.current = value;\n  return prev;\n}\n\nfunction fillArray(length, mapIndex) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(mapIndex(i));\n  }\n\n  return arr;\n}\n/**\n * This tries to put deleted items back into the given `out` list in correct\n * order. Deleted items must have a `left` and `right` property with key of\n * their sibling which is used to find the correct placement.\n */\n\n\nfunction reconcileDeleted(deleted, current) {\n  // Copy as we will be mutating the arrays\n  deleted = _toConsumableArray(deleted);\n  current = _toConsumableArray(current); // Used to detect deadlock (when a pass finds 0 siblings)\n\n  var failedTries = 0; // Track where the current pass start/ends\n\n  var passIndex = 0;\n  var nextPassIndex = deleted.length; // Insert all deleted items into `current`\n\n  for (var i = 0; i < deleted.length; i++) {\n    if (i === nextPassIndex) {\n      // Sanity test: Push to end if somehow no siblings were found\n      if (passIndex + failedTries === nextPassIndex) {\n        for (var j = i; j < deleted.length; j++) {\n          var _deleted$j = deleted[j],\n              _left = _deleted$j.left,\n              _right = _deleted$j.right,\n              _deletedItem = _objectWithoutPropertiesLoose(_deleted$j, [\"left\", \"right\"]);\n\n          current.push(_deletedItem);\n        }\n\n        break;\n      } // Update local state at the end of each pass\n\n\n      passIndex = nextPassIndex;\n      nextPassIndex = deleted.length;\n      failedTries = 0;\n    } // The index of the deleted item in `current`\n\n\n    var index = -1; // Look for the left or right sibling in `current`\n\n    var _deleted$i = deleted[i],\n        left = _deleted$i.left,\n        right = _deleted$i.right,\n        deletedItem = _objectWithoutPropertiesLoose(_deleted$i, [\"left\", \"right\"]);\n\n    for (var _j = current.length; --_j >= 0;) {\n      var key = current[_j].originalKey;\n\n      if (key === right) {\n        index = _j;\n        break;\n      }\n\n      if (key === left) {\n        index = _j + 1;\n        break;\n      }\n    } // Items with no index are revisited in the next pass\n\n\n    if (index < 0) {\n      failedTries++;\n      deleted.push(deleted[i]);\n    } else {\n      current.splice(index, 0, deletedItem);\n    }\n  }\n\n  return current;\n}\n\nvar Animated =\n/*#__PURE__*/\nfunction () {\n  function Animated() {\n    _classCallCheck(this, Animated);\n\n    this.payload = void 0;\n    this.children = [];\n  }\n\n  _createClass(Animated, [{\n    key: \"getAnimatedValue\",\n    value: function getAnimatedValue() {\n      return this.getValue();\n    }\n  }, {\n    key: \"getPayload\",\n    value: function getPayload() {\n      return this.payload || this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach() {}\n  }, {\n    key: \"detach\",\n    value: function detach() {}\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this.children;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      if (this.children.length === 0) this.attach();\n      this.children.push(child);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      var index = this.children.indexOf(child);\n      this.children.splice(index, 1);\n      if (this.children.length === 0) this.detach();\n    }\n  }]);\n\n  return Animated;\n}();\n\nvar AnimatedArray =\n/*#__PURE__*/\nfunction (_Animated) {\n  _inherits(AnimatedArray, _Animated);\n\n  function AnimatedArray() {\n    var _this2;\n\n    _classCallCheck(this, AnimatedArray);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedArray).apply(this, arguments));\n    _this2.payload = [];\n\n    _this2.attach = function () {\n      return _this2.payload.forEach(function (p) {\n        return p instanceof Animated && p.addChild(_assertThisInitialized(_this2));\n      });\n    };\n\n    _this2.detach = function () {\n      return _this2.payload.forEach(function (p) {\n        return p instanceof Animated && p.removeChild(_assertThisInitialized(_this2));\n      });\n    };\n\n    return _this2;\n  }\n\n  return AnimatedArray;\n}(Animated);\n\nvar AnimatedObject =\n/*#__PURE__*/\nfunction (_Animated2) {\n  _inherits(AnimatedObject, _Animated2);\n\n  function AnimatedObject() {\n    var _this3;\n\n    _classCallCheck(this, AnimatedObject);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedObject).apply(this, arguments));\n    _this3.payload = {};\n\n    _this3.attach = function () {\n      return Object.values(_this3.payload).forEach(function (s) {\n        return s instanceof Animated && s.addChild(_assertThisInitialized(_this3));\n      });\n    };\n\n    _this3.detach = function () {\n      return Object.values(_this3.payload).forEach(function (s) {\n        return s instanceof Animated && s.removeChild(_assertThisInitialized(_this3));\n      });\n    };\n\n    return _this3;\n  }\n\n  _createClass(AnimatedObject, [{\n    key: \"getValue\",\n    value: function getValue(animated) {\n      if (animated === void 0) {\n        animated = false;\n      }\n\n      var payload = {};\n\n      for (var key in this.payload) {\n        var value = this.payload[key];\n        if (animated && !(value instanceof Animated)) continue;\n        payload[key] = value instanceof Animated ? value[animated ? 'getAnimatedValue' : 'getValue']() : value;\n      }\n\n      return payload;\n    }\n  }, {\n    key: \"getAnimatedValue\",\n    value: function getAnimatedValue() {\n      return this.getValue(true);\n    }\n  }]);\n\n  return AnimatedObject;\n}(Animated); //\n// Required\n\n\nvar applyAnimatedValues;\nvar createStringInterpolator; //\n// Optional\n//\n\nvar now = function now() {\n  return Date.now();\n};\n\nvar colorNames = {};\nvar defaultElement;\nvar manualFrameloop;\nvar createAnimatedStyle;\nvar createAnimatedTransform;\n\nvar createAnimatedRef = function createAnimatedRef(node) {\n  return node.current;\n};\n\nvar requestAnimationFrame = typeof window !== 'undefined' ? window.requestAnimationFrame : void 0;\nvar cancelAnimationFrame = typeof window !== 'undefined' ? window.cancelAnimationFrame : void 0; //\n// Configuration\n//\n\nvar assign = function assign(globals) {\n  var _Object$assign = Object.assign({\n    colorNames: colorNames,\n    defaultElement: defaultElement,\n    applyAnimatedValues: applyAnimatedValues,\n    createStringInterpolator: createStringInterpolator,\n    createAnimatedTransform: createAnimatedTransform,\n    createAnimatedStyle: createAnimatedStyle,\n    createAnimatedRef: createAnimatedRef,\n    requestAnimationFrame: requestAnimationFrame,\n    cancelAnimationFrame: cancelAnimationFrame,\n    manualFrameloop: manualFrameloop\n  }, globals);\n\n  colorNames = _Object$assign.colorNames;\n  defaultElement = _Object$assign.defaultElement;\n  applyAnimatedValues = _Object$assign.applyAnimatedValues;\n  createStringInterpolator = _Object$assign.createStringInterpolator;\n  createAnimatedTransform = _Object$assign.createAnimatedTransform;\n  createAnimatedStyle = _Object$assign.createAnimatedStyle;\n  createAnimatedRef = _Object$assign.createAnimatedRef;\n  requestAnimationFrame = _Object$assign.requestAnimationFrame;\n  cancelAnimationFrame = _Object$assign.cancelAnimationFrame;\n  manualFrameloop = _Object$assign.manualFrameloop;\n  return _Object$assign;\n};\n\nvar Globals =\n/*#__PURE__*/\nObject.freeze({\n  get applyAnimatedValues() {\n    return applyAnimatedValues;\n  },\n\n  get createStringInterpolator() {\n    return createStringInterpolator;\n  },\n\n  now: now,\n\n  get colorNames() {\n    return colorNames;\n  },\n\n  get defaultElement() {\n    return defaultElement;\n  },\n\n  get manualFrameloop() {\n    return manualFrameloop;\n  },\n\n  get createAnimatedStyle() {\n    return createAnimatedStyle;\n  },\n\n  get createAnimatedTransform() {\n    return createAnimatedTransform;\n  },\n\n  get createAnimatedRef() {\n    return createAnimatedRef;\n  },\n\n  get requestAnimationFrame() {\n    return requestAnimationFrame;\n  },\n\n  get cancelAnimationFrame() {\n    return cancelAnimationFrame;\n  },\n\n  assign: assign\n});\n/**\n * Wraps the `style` property with `AnimatedStyle`.\n */\n\nvar AnimatedProps =\n/*#__PURE__*/\nfunction (_AnimatedObject) {\n  _inherits(AnimatedProps, _AnimatedObject);\n\n  function AnimatedProps(props, callback) {\n    var _this4;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedProps).call(this));\n    _this4.update = void 0;\n    _this4.payload = props.style && createAnimatedStyle ? _extends({}, props, {\n      style: createAnimatedStyle(props.style)\n    }) : props;\n    _this4.update = callback;\n\n    _this4.attach();\n\n    return _this4;\n  }\n\n  return AnimatedProps;\n}(AnimatedObject);\n\nvar createAnimatedComponent = function createAnimatedComponent(Component) {\n  var AnimatedComponent = forwardRef(function (props, _ref) {\n    var forceUpdate = useForceUpdate();\n    var mounted = useRef(true);\n    var propsAnimated = useRef(null);\n    var node = useRef(null);\n    var attachProps = useCallback(function (props) {\n      var oldPropsAnimated = propsAnimated.current;\n\n      var callback = function callback() {\n        if (node.current) {\n          var didUpdate = applyAnimatedValues(node.current, propsAnimated.current.getAnimatedValue());\n          if (didUpdate === false) forceUpdate();\n        }\n      };\n\n      propsAnimated.current = new AnimatedProps(props, callback);\n      oldPropsAnimated && oldPropsAnimated.detach();\n    }, []);\n    useEffect(function () {\n      return function () {\n        mounted.current = false;\n        propsAnimated.current && propsAnimated.current.detach();\n      };\n    }, []);\n    useImperativeHandle(_ref, function () {\n      return createAnimatedRef(node, mounted, forceUpdate);\n    });\n    attachProps(props);\n\n    var _getValue = propsAnimated.current.getValue(),\n        scrollTop = _getValue.scrollTop,\n        scrollLeft = _getValue.scrollLeft,\n        animatedProps = _objectWithoutPropertiesLoose(_getValue, [\"scrollTop\", \"scrollLeft\"]);\n\n    return React.createElement(Component, _extends({}, animatedProps, {\n      ref: function ref(childRef) {\n        return node.current = handleRef(childRef, _ref);\n      }\n    }));\n  });\n  return AnimatedComponent;\n};\n/**\n * withExtend(animated, options = {})\n */\n\n/** Add an `extend` method to your `animated` factory function */\n\n\nfunction withExtend(animated, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var self = animated;\n\n  self.extend = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.forEach(function (arg) {\n      return extend(arg);\n    });\n    return self;\n  };\n\n  return self;\n\n  function extend(arg, overrideKey) {\n    // Arrays avoid passing their index to `extend`\n    if (is.arr(arg)) {\n      return arg.forEach(function (arg) {\n        return extend(arg);\n      });\n    } // Object keys are always used over value inspection\n\n\n    if (is.obj(arg)) {\n      for (var _key2 in arg) {\n        extend(arg[_key2], _key2);\n      }\n\n      return;\n    } // Use the `overrideKey` or inspect the value for a key\n\n\n    var key = is.str(overrideKey) ? overrideKey : is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) ? arg.name : ''; // This lowercases the first letter of the key\n\n    if (options.lowercase) {\n      key = key[0].toLowerCase() + key.slice(1);\n    } // NOTE(typescript): Properties are not yet inferred from the arguments of\n    // the `extend` method and then attached to the `animated` function via\n    // the return type.\n\n\n    self[key] = animated(arg);\n  }\n}\n\nfunction createInterpolator(range, output, extrapolate) {\n  if (typeof range === 'function') {\n    return range;\n  }\n\n  if (Array.isArray(range)) {\n    return createInterpolator({\n      range: range,\n      output: output,\n      extrapolate: extrapolate\n    });\n  }\n\n  if (typeof range.output[0] === 'string') {\n    return createStringInterpolator(range);\n  }\n\n  var config = range;\n  var outputRange = config.output;\n  var inputRange = config.range || [0, 1];\n  var extrapolateLeft = config.extrapolateLeft || config.extrapolate || 'extend';\n  var extrapolateRight = config.extrapolateRight || config.extrapolate || 'extend';\n\n  var easing = config.easing || function (t) {\n    return t;\n  };\n\n  return function (input) {\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n  };\n}\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n  var result = map ? map(input) : input; // Extrapolate\n\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result;else if (extrapolateLeft === 'clamp') result = inputMin;\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result;else if (extrapolateRight === 'clamp') result = inputMax;\n  }\n\n  if (outputMin === outputMax) return outputMin;\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax; // Input Range\n\n  if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin); // Easing\n\n  result = easing(result); // Output Range\n\n  if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) break;\n  }\n\n  return i - 1;\n}\n\nvar AnimatedInterpolation =\n/*#__PURE__*/\nfunction (_AnimatedArray) {\n  _inherits(AnimatedInterpolation, _AnimatedArray);\n\n  function AnimatedInterpolation(parents, range, output) {\n    var _this5;\n\n    _classCallCheck(this, AnimatedInterpolation);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));\n    _this5.calc = void 0;\n    _this5.calc = createInterpolator(range, output);\n    _this5.payload = parents instanceof AnimatedArray && !(parents instanceof AnimatedInterpolation) ? parents.getPayload() : Array.isArray(parents) ? parents : [parents];\n    return _this5;\n  }\n\n  _createClass(AnimatedInterpolation, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.calc.apply(this, _toConsumableArray(this.payload.map(function (value) {\n        return value.getValue();\n      })));\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(range, output) {\n      return new AnimatedInterpolation(this, range, output);\n    }\n  }]);\n\n  return AnimatedInterpolation;\n}(AnimatedArray);\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an AnimatedValue is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\n\n\nfunction addAnimatedStyles(node, styles) {\n  if ('update' in node) {\n    styles.add(node);\n  } else {\n    node.getChildren().forEach(function (child) {\n      return addAnimatedStyles(child, styles);\n    });\n  }\n}\n\nvar AnimatedValue =\n/*#__PURE__*/\nfunction (_Animated3) {\n  _inherits(AnimatedValue, _Animated3);\n\n  function AnimatedValue(_value) {\n    var _this6;\n\n    _classCallCheck(this, AnimatedValue);\n\n    var _this;\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValue).call(this));\n    _this = _assertThisInitialized(_this6);\n    _this6.animatedStyles = new Set();\n    _this6.value = void 0;\n    _this6.startPosition = void 0;\n    _this6.lastPosition = void 0;\n    _this6.lastVelocity = void 0;\n    _this6.startTime = void 0;\n    _this6.lastTime = void 0;\n    _this6.done = false;\n\n    _this6.setValue = function (value, flush) {\n      if (flush === void 0) {\n        flush = true;\n      }\n\n      _this.value = value;\n      if (flush) _this.flush();\n    };\n\n    _this6.value = _value;\n    _this6.startPosition = _value;\n    _this6.lastPosition = _value;\n    return _this6;\n  }\n\n  _createClass(AnimatedValue, [{\n    key: \"flush\",\n    value: function flush() {\n      if (this.animatedStyles.size === 0) {\n        addAnimatedStyles(this, this.animatedStyles);\n      }\n\n      this.animatedStyles.forEach(function (animatedStyle) {\n        return animatedStyle.update();\n      });\n    }\n  }, {\n    key: \"clearStyles\",\n    value: function clearStyles() {\n      this.animatedStyles.clear();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(range, output) {\n      return new AnimatedInterpolation(this, range, output);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(isActive) {\n      this.startPosition = this.value;\n      this.lastPosition = this.value;\n      this.lastVelocity = isActive ? this.lastVelocity : undefined;\n      this.lastTime = isActive ? this.lastTime : undefined;\n      this.startTime = now();\n      this.done = false;\n      this.animatedStyles.clear();\n    }\n  }]);\n\n  return AnimatedValue;\n}(Animated);\n\nvar AnimatedValueArray =\n/*#__PURE__*/\nfunction (_AnimatedArray2) {\n  _inherits(AnimatedValueArray, _AnimatedArray2);\n\n  function AnimatedValueArray(values) {\n    var _this7;\n\n    _classCallCheck(this, AnimatedValueArray);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValueArray).call(this));\n    _this7.payload = values;\n    return _this7;\n  }\n\n  _createClass(AnimatedValueArray, [{\n    key: \"setValue\",\n    value: function setValue(value, flush) {\n      var _this8 = this;\n\n      if (flush === void 0) {\n        flush = true;\n      }\n\n      if (Array.isArray(value)) {\n        if (value.length === this.payload.length) {\n          value.forEach(function (v, i) {\n            return _this8.payload[i].setValue(v, flush);\n          });\n        }\n      } else {\n        this.payload.forEach(function (p) {\n          return p.setValue(value, flush);\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.payload.map(function (v) {\n        return v.getValue();\n      });\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(range, output) {\n      return new AnimatedInterpolation(this, range, output);\n    }\n  }]);\n\n  return AnimatedValueArray;\n}(AnimatedArray);\n\nvar active = false;\nvar controllers = new Set();\n\nvar update = function update() {\n  if (!active) return false;\n  var time = now();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = controllers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var controller = _step.value;\n      var isActive = false; // Number of updated animations\n\n      var updateCount = 0;\n\n      for (var configIdx = 0; configIdx < controller.configs.length; configIdx++) {\n        var _config = controller.configs[configIdx];\n        var endOfAnimation = void 0,\n            lastTime = void 0;\n\n        for (var valIdx = 0; valIdx < _config.animatedValues.length; valIdx++) {\n          var animated = _config.animatedValues[valIdx];\n          if (animated.done) continue;\n          updateCount++;\n          var to = _config.toValues[valIdx];\n          var isAnimated = to instanceof Animated;\n          if (isAnimated) to = to.getValue(); // Jump to end value for immediate animations\n\n          if (_config.immediate) {\n            animated.setValue(to);\n            animated.done = true;\n            continue;\n          }\n\n          var from = _config.fromValues[valIdx]; // Break animation when string values are involved\n\n          if (typeof from === 'string' || typeof to === 'string') {\n            animated.setValue(to);\n            animated.done = true;\n            continue;\n          }\n\n          var position = animated.lastPosition;\n          var velocity = Array.isArray(_config.initialVelocity) ? _config.initialVelocity[valIdx] : _config.initialVelocity;\n\n          if (_config.duration !== void 0) {\n            /** Duration easing */\n            position = from + _config.easing((time - animated.startTime) / _config.duration) * (to - from);\n            endOfAnimation = time >= animated.startTime + _config.duration;\n          } else if (_config.decay) {\n            var decay = _config.decay === true ? 0.998 : _config.decay;\n            /** Decay easing */\n\n            position = from + velocity / (1 - decay) * (1 - Math.exp(-(1 - decay) * (time - animated.startTime)));\n            endOfAnimation = Math.abs(animated.lastPosition - position) < 0.1;\n            if (endOfAnimation) to = position;\n          } else {\n            /** Spring easing */\n            lastTime = animated.lastTime !== void 0 ? animated.lastTime : time;\n            velocity = animated.lastVelocity !== void 0 ? animated.lastVelocity : _config.initialVelocity; // If we lost a lot of frames just jump to the end.\n\n            if (time > lastTime + 64) lastTime = time; // http://gafferongames.com/game-physics/fix-your-timestep/\n\n            var numSteps = Math.floor(time - lastTime);\n\n            for (var i = 0; i < numSteps; ++i) {\n              var force = -_config.tension * (position - to);\n              var damping = -_config.friction * velocity;\n              var acceleration = (force + damping) / _config.mass;\n              velocity = velocity + acceleration * 1 / 1000;\n              position = position + velocity * 1 / 1000;\n            } // Conditions for stopping the spring animation\n\n\n            var isOvershooting = _config.clamp && _config.tension !== 0 ? from < to ? position > to : position < to : false;\n\n            var isVelocity = Math.abs(velocity) <= _config.precision;\n\n            var isDisplacement = _config.tension !== 0 ? Math.abs(to - position) <= _config.precision : true;\n            endOfAnimation = isOvershooting || isVelocity && isDisplacement;\n            animated.lastVelocity = velocity;\n            animated.lastTime = time;\n          } // Trails aren't done until their parents conclude\n\n\n          if (isAnimated && !_config.toValues[valIdx].done) endOfAnimation = false;\n\n          if (endOfAnimation) {\n            // Ensure that we end up with a round value\n            if (animated.value !== to) position = to;\n            animated.done = true;\n          } else isActive = true;\n\n          animated.setValue(position);\n          animated.lastPosition = position;\n        } // Keep track of updated values only when necessary\n\n\n        if (controller.props.onFrame) {\n          controller.values[_config.key] = _config.animated.getValue();\n        }\n      }\n\n      controller.onFrame(isActive, updateCount);\n    } // Loop over as long as there are controllers ...\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (controllers.size) {\n    if (manualFrameloop) manualFrameloop();else requestAnimationFrame(update);\n  } else {\n    active = false;\n  }\n\n  return active;\n};\n\nvar start = function start(controller) {\n  controllers.add(controller);\n\n  if (!active) {\n    active = true;\n    if (manualFrameloop) manualFrameloop();else requestAnimationFrame(update);\n  }\n};\n\nvar stop = function stop(controller) {\n  controllers.delete(controller);\n}; // Default easing\n\n\nvar linear = function linear(t) {\n  return t;\n};\n\nvar emptyObj = Object.freeze({});\nvar nextId = 1;\n\nvar Controller =\n/*#__PURE__*/\nfunction () {\n  function Controller(props) {\n    _classCallCheck(this, Controller);\n\n    this.id = nextId++;\n    this.idle = true;\n    this.props = {};\n    this.queue = [];\n    this.timestamps = {};\n    this.values = {};\n    this.merged = {};\n    this.animated = {};\n    this.animations = {};\n    this.configs = [];\n    this.onEndQueue = [];\n    this.runCount = 0;\n    if (props) this.update(props).start();\n  }\n  /**\n   * Push props into the update queue. The props are used after `start` is\n   * called and any delay is over. The props are intelligently diffed to ensure\n   * that later calls to this method properly override any delayed props.\n   * The `propsArg` argument is always copied before mutations are made.\n   */\n\n\n  _createClass(Controller, [{\n    key: \"update\",\n    value: function update(propsArg) {\n      if (!propsArg) return this;\n      var props = interpolateTo(propsArg); // For async animations, the `from` prop must be defined for\n      // the Animated nodes to exist before animations have started.\n\n      this._ensureAnimated(props.from);\n\n      this._ensureAnimated(props.to);\n\n      props.timestamp = now(); // The `delay` prop of every update must be a number >= 0\n\n      if (is.fun(props.delay) && is.obj(props.to)) {\n        var from = props.from || emptyObj;\n\n        for (var key in props.to) {\n          this.queue.push(_extends({}, props, {\n            to: _defineProperty({}, key, props.to[key]),\n            from: key in from ? _defineProperty({}, key, from[key]) : void 0,\n            delay: Math.max(0, Math.round(props.delay(key)))\n          }));\n        }\n      } else {\n        props.delay = is.num(props.delay) ? Math.max(0, Math.round(props.delay)) : 0; // Coerce falsy values to undefined for these props\n\n        if (!props.to) props.to = void 0;\n        if (!props.from) props.from = void 0;\n        this.queue.push(props);\n      }\n\n      return this;\n    }\n    /**\n     * Flush the update queue.\n     * If the queue is empty, try starting the frameloop.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(onEnd) {\n      if (this.queue.length) this._flush(onEnd);else this._start(onEnd);\n      return this;\n    }\n    /** Stop one animation or all animations */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this9 = this;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n\n      var finished = false;\n\n      if (is.boo(keys[0])) {\n        var _keys = keys;\n        finished = _keys[0];\n        keys = _keys.slice(1);\n      } // Stop animations by key\n\n\n      if (keys.length) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var key = _step2.value;\n\n            var index = _this9.configs.findIndex(function (config) {\n              return key === config.key;\n            });\n\n            _this9._stopAnimation(key);\n\n            _this9.configs[index] = _this9.animations[key];\n          };\n\n          for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // Stop all animations\n      else if (this.runCount) {\n          // Stop all async animations\n          this.animations = _extends({}, this.animations); // Update the animation configs\n\n          this.configs.forEach(function (config) {\n            return _this9._stopAnimation(config.key);\n          });\n          this.configs = Object.values(this.animations); // Exit the frameloop\n\n          this._stop(finished);\n        }\n\n      return this;\n    }\n    /** @internal Called by the frameloop */\n\n  }, {\n    key: \"onFrame\",\n    value: function onFrame(isActive, updateCount) {\n      if (updateCount) {\n        var onFrame = this.props.onFrame;\n        if (onFrame) onFrame(this.values);\n      }\n\n      if (!isActive) this._stop(true);\n    }\n    /** Reset the internal state */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.stop();\n      this.props = {};\n      this.timestamps = {};\n      this.values = {};\n      this.merged = {};\n      this.animated = {};\n      this.animations = {};\n      this.configs = [];\n    }\n    /**\n     * Set a prop for the next animations where the prop is undefined. The given\n     * value is overridden by the next update where the prop is defined.\n     *\n     * Ongoing animations are not changed.\n     */\n\n  }, {\n    key: \"setProp\",\n    value: function setProp(key, value) {\n      this.props[key] = value;\n      this.timestamps[key] = now();\n      return this;\n    } // Create an Animated node if none exists.\n\n  }, {\n    key: \"_ensureAnimated\",\n    value: function _ensureAnimated(values) {\n      if (!is.obj(values)) return;\n\n      for (var key in values) {\n        if (this.animated[key]) continue;\n        var value = values[key];\n        var animated = createAnimated(value);\n\n        if (animated) {\n          this.animated[key] = animated;\n\n          this._stopAnimation(key);\n        } else {\n          console.warn('Given value not animatable:', value);\n        }\n      }\n    } // Listen for all animations to end.\n\n  }, {\n    key: \"_onEnd\",\n    value: function _onEnd(onEnd) {\n      if (this.runCount) this.onEndQueue.push(onEnd);else onEnd(true);\n    } // Add this controller to the frameloop.\n\n  }, {\n    key: \"_start\",\n    value: function _start(onEnd) {\n      if (onEnd) this._onEnd(onEnd);\n\n      if (this.idle && this.runCount) {\n        this.idle = false;\n        start(this);\n      }\n    } // Remove this controller from the frameloop, and notify any listeners.\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(finished) {\n      this.idle = true;\n      stop(this);\n      var onEndQueue = this.onEndQueue;\n\n      if (onEndQueue.length) {\n        this.onEndQueue = [];\n        onEndQueue.forEach(function (onEnd) {\n          return onEnd(finished);\n        });\n      }\n    } // Execute the current queue of prop updates.\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(onEnd) {\n      var _this10 = this;\n\n      var queue = this.queue.reduce(reduceDelays, []);\n      this.queue.length = 0; // Track the number of active `_run` calls.\n\n      var runsLeft = Object.keys(queue).length;\n      this.runCount += runsLeft; // Never assume that the last update always finishes last, since that's\n      // not true when 2+ async updates have indeterminate durations.\n\n      var onRunEnd = function onRunEnd(finished) {\n        _this10.runCount--;\n        if (--runsLeft) return;\n        if (onEnd) onEnd(finished);\n\n        if (!_this10.runCount && finished) {\n          var onRest = _this10.props.onRest;\n          if (onRest) onRest(_this10.merged);\n        }\n      };\n\n      queue.forEach(function (props, delay) {\n        if (delay) setTimeout(function () {\n          return _this10._run(props, onRunEnd);\n        }, delay);else _this10._run(props, onRunEnd);\n      });\n    } // Update the props and animations\n\n  }, {\n    key: \"_run\",\n    value: function _run(props, onEnd) {\n      if (is.arr(props.to) || is.fun(props.to)) {\n        this._runAsync(props, onEnd);\n      } else if (this._diff(props)) {\n        this._animate(props)._start(onEnd);\n      } else {\n        this._onEnd(onEnd);\n      }\n    } // Start an async chain or an async script.\n\n  }, {\n    key: \"_runAsync\",\n    value: function _runAsync(_ref, onEnd) {\n      var _this11 = this;\n\n      var to = _ref.to,\n          props = _objectWithoutPropertiesLoose(_ref, [\"to\"]); // Merge other props immediately.\n\n\n      if (this._diff(props)) {\n        this._animate(props);\n      } // Async scripts can be declaratively cancelled.\n\n\n      if (props.cancel === true) {\n        this.props.asyncTo = void 0;\n        return onEnd(false);\n      } // Never run more than one script at a time.\n\n\n      if (!this._diff({\n        asyncTo: to,\n        timestamp: props.timestamp\n      })) {\n        return onEnd(false);\n      }\n\n      var animations = this.animations;\n\n      var isCancelled = function isCancelled() {\n        return (// The `stop` and `destroy` methods replace the `animations` map.\n          animations !== _this11.animations || // Async scripts are cancelled when a new chain/script begins.\n          is.fun(to) && to !== _this11.props.asyncTo\n        );\n      };\n\n      var last;\n\n      var next = function next(props) {\n        if (isCancelled()) throw _this11;\n        return (last = new Promise(function (done) {\n          _this11.update(props).start(done);\n        })).then(function () {\n          if (isCancelled()) throw _this11;\n        });\n      };\n\n      var queue = Promise.resolve();\n\n      if (is.arr(to)) {\n        to.forEach(function (props) {\n          return queue = queue.then(function () {\n            return next(props);\n          });\n        });\n      } else if (is.fun(to)) {\n        queue = queue.then(function () {\n          return to(next, _this11.stop.bind(_this11)) // Always wait for the last update.\n          .then(function () {\n            return last;\n          });\n        });\n      }\n\n      queue.catch(function (err) {\n        return err !== _this11 && console.error(err);\n      }).then(function () {\n        return onEnd(!isCancelled());\n      });\n    } // Merge every fresh prop. Returns true if one or more props changed.\n    // These props are ignored: (config, immediate, reverse)\n\n  }, {\n    key: \"_diff\",\n    value: function _diff(_ref2) {\n      var _this12 = this;\n\n      var timestamp = _ref2.timestamp,\n          config = _ref2.config,\n          immediate = _ref2.immediate,\n          reverse = _ref2.reverse,\n          props = _objectWithoutPropertiesLoose(_ref2, [\"timestamp\", \"config\", \"immediate\", \"reverse\"]);\n\n      var changed = false; // Ensure the newer timestamp is used.\n\n      var diffTimestamp = function diffTimestamp(keyPath) {\n        var previous = _this12.timestamps[keyPath];\n\n        if (is.und(previous) || timestamp >= previous) {\n          _this12.timestamps[keyPath] = timestamp;\n          return true;\n        }\n\n        return false;\n      }; // Generalized diffing algorithm\n\n\n      var diffProp = function diffProp(keys, value, parent) {\n        if (is.und(value)) return;\n        var lastKey = keys[keys.length - 1];\n\n        if (is.obj(value)) {\n          if (!is.obj(parent[lastKey])) parent[lastKey] = {};\n\n          for (var key in value) {\n            diffProp(keys.concat(key), value[key], parent[lastKey]);\n          }\n        } else if (diffTimestamp(keys.join('.'))) {\n          var oldValue = parent[lastKey];\n\n          if (!is.equ(value, oldValue)) {\n            changed = true;\n            parent[lastKey] = value;\n          }\n        }\n      };\n\n      if (reverse) {\n        var to = props.to;\n        props.to = props.from;\n        props.from = is.obj(to) ? to : void 0;\n      }\n\n      for (var key in props) {\n        diffProp([key], props[key], this.props);\n      } // These props only affect one update\n\n\n      if (props.reset) this.props.reset = false;\n      if (props.cancel) this.props.cancel = false;\n      return changed;\n    } // Return true if the given prop was changed by this update\n\n  }, {\n    key: \"_isModified\",\n    value: function _isModified(props, prop) {\n      return this.timestamps[prop] === props.timestamp;\n    } // Update the animation configs. The given props override any default props.\n\n  }, {\n    key: \"_animate\",\n    value: function _animate(props) {\n      var _this13 = this;\n\n      var _this$props = this.props,\n          _this$props$from = _this$props.from,\n          from = _this$props$from === void 0 ? emptyObj : _this$props$from,\n          _this$props$to = _this$props.to,\n          to = _this$props$to === void 0 ? emptyObj : _this$props$to,\n          attach = _this$props.attach,\n          onStart = _this$props.onStart;\n\n      var isPrevented = function isPrevented(_) {\n        return false;\n      };\n\n      if (props.cancel && this._isModified(props, 'cancel')) {\n        // Stop all animations when `cancel` is true\n        if (props.cancel === true) {\n          return this.stop();\n        } // Prevent matching properties from animating when\n        // `cancel` is a string or array of strings\n\n\n        var keys = toArray(props.cancel);\n\n        if (is.arr(keys) && keys.length) {\n          isPrevented = function isPrevented(key) {\n            return keys.indexOf(key) >= 0;\n          };\n\n          this.stop.apply(this, _toConsumableArray(keys));\n        }\n      } // Merge `from` values with `to` values\n\n\n      this.merged = _extends({}, from, to); // True if any animation was updated\n\n      var changed = false; // The animations that are starting or restarting\n\n      var started = []; // Attachment handling, trailed springs can \"attach\" themselves to a previous spring\n\n      var target = attach && attach(this); // Reduces input { key: value } pairs into animation objects\n\n      for (var key in this.merged) {\n        if (isPrevented(key)) continue;\n        var state = this.animations[key];\n\n        if (!state) {\n          console.warn(\"Failed to animate key: \\\"\".concat(key, \"\\\"\\n\") + \"Did you forget to define \\\"from.\".concat(key, \"\\\" for an async animation?\"));\n          continue;\n        } // Reuse the Animated nodes whenever possible\n\n\n        var animated = state.animated,\n            animatedValues = state.animatedValues;\n        var value = this.merged[key];\n        var goalValue = computeGoalValue(value); // Stop animations with a goal value equal to its current value.\n\n        if (!props.reset && is.equ(goalValue, animated.getValue())) {\n          // The animation might be stopped already.\n          if (!state.idle) {\n            changed = true;\n\n            this._stopAnimation(key);\n          }\n\n          continue;\n        } // Replace an animation when its goal value is changed (or it's been reset)\n\n\n        if (props.reset || !is.equ(goalValue, state.goalValue)) {\n          var _ret = function () {\n            var _ref3 = is.und(props.immediate) ? _this13.props : props,\n                immediate = _ref3.immediate;\n\n            immediate = !!callProp(immediate, key);\n            var isActive = animatedValues.some(function (v) {\n              return !v.done;\n            });\n            var fromValue = !is.und(from[key]) ? computeGoalValue(from[key]) : goalValue; // Animatable strings use interpolation\n\n            var isInterpolated = isAnimatableString(value);\n\n            if (isInterpolated) {\n              var output = [props.reset ? fromValue : animated.getValue(), goalValue];\n              var input = animatedValues[0];\n\n              if (input) {\n                input.setValue(0, false);\n                input.reset(isActive);\n              } else {\n                input = new AnimatedValue(0);\n              }\n\n              try {\n                var prev = animated;\n                animated = input.interpolate({\n                  output: output\n                });\n                moveChildren(prev, animated);\n              } catch (err) {\n                console.warn('Failed to interpolate string from \"%s\" to \"%s\"', output[0], output[1]);\n                console.error(err);\n                return \"continue\";\n              }\n\n              if (immediate) {\n                input.setValue(1, false);\n              }\n            } else {\n              // Convert values into Animated nodes (reusing nodes whenever possible)\n              if (is.arr(value)) {\n                if (animated instanceof AnimatedValueArray) {\n                  if (props.reset) animated.setValue(fromValue, false);\n                  animatedValues.forEach(function (v) {\n                    return v.reset(isActive);\n                  });\n                } else {\n                  var _prev = animated;\n                  animated = createAnimated(fromValue);\n                  moveChildren(_prev, animated);\n                }\n              } else {\n                if (animated instanceof AnimatedValue) {\n                  if (props.reset) animated.setValue(fromValue, false);\n                  animated.reset(isActive);\n                } else {\n                  var _prev2 = animated;\n                  animated = new AnimatedValue(fromValue);\n                  moveChildren(_prev2, animated);\n                }\n              }\n\n              if (immediate) {\n                animated.setValue(goalValue, false);\n              }\n            } // Only change the \"config\" of updated animations.\n\n\n            var config = callProp(props.config, key) || callProp(_this13.props.config, key) || emptyObj;\n\n            if (!immediate) {\n              started.push(key);\n            }\n\n            changed = true;\n            animatedValues = toArray(animated.getPayload());\n            _this13.animations[key] = {\n              key: key,\n              idle: false,\n              goalValue: goalValue,\n              toValues: toArray(target ? target.animations[key].animated.getPayload() : isInterpolated && 1 || goalValue),\n              fromValues: animatedValues.map(function (v) {\n                return v.getValue();\n              }),\n              animated: animated,\n              animatedValues: animatedValues,\n              immediate: immediate,\n              duration: config.duration,\n              easing: withDefault(config.easing, linear),\n              decay: config.decay,\n              mass: withDefault(config.mass, 1),\n              tension: withDefault(config.tension, 170),\n              friction: withDefault(config.friction, 26),\n              initialVelocity: withDefault(config.velocity, 0),\n              clamp: withDefault(config.clamp, false),\n              precision: withDefault(config.precision, 0.01),\n              config: config\n            };\n          }();\n\n          if (_ret === \"continue\") continue;\n        }\n      }\n\n      if (changed) {\n        if (onStart && started.length) {\n          started.forEach(function (key) {\n            return onStart(_this13.animations[key]);\n          });\n        } // Make animations available to the frameloop\n\n\n        var configs = this.configs = [];\n        var values = this.values = {};\n        var nodes = this.animated = {};\n\n        for (var _key3 in this.animations) {\n          var _config2 = this.animations[_key3];\n          configs.push(_config2);\n          values[_key3] = _config2.animated.getValue();\n          nodes[_key3] = _config2.animated;\n        }\n      }\n\n      return this;\n    } // Stop an animation by its key\n\n  }, {\n    key: \"_stopAnimation\",\n    value: function _stopAnimation(key) {\n      if (!this.animated[key]) return;\n      var state = this.animations[key];\n      if (state && state.idle) return;\n\n      var _ref4 = state || emptyObj,\n          animated = _ref4.animated,\n          animatedValues = _ref4.animatedValues;\n\n      if (!state) {\n        animated = this.animated[key];\n        animatedValues = toArray(animated.getPayload());\n      } // Tell the frameloop to stop animating these values\n\n\n      animatedValues.forEach(function (v) {\n        return v.done = true;\n      }); // Prevent any pending updates to this key\n\n      this.timestamps['to.' + key] = now(); // The current value becomes the goal value,\n      // which ensures the integrity of the diffing algorithm.\n\n      var goalValue = animated.getValue();\n\n      if (this.props.to) {\n        this.props.to[key] = goalValue;\n      } // Remove unused data from this key's animation config\n\n\n      this.animations[key] = {\n        key: key,\n        idle: true,\n        goalValue: goalValue,\n        animated: animated,\n        animatedValues: animatedValues\n      };\n    }\n  }]);\n\n  return Controller;\n}();\n/** Wrap any value with an `Animated` node */\n\n\nfunction createAnimated(value) {\n  return is.arr(value) ? new AnimatedValueArray(value.map(function (value) {\n    var animated = createAnimated(value);\n    var payload = animated.getPayload();\n    return animated instanceof AnimatedInterpolation ? payload[0] : payload;\n  })) : isAnimatableString(value) ? new AnimatedValue(0).interpolate({\n    output: [value, value]\n  }) : new AnimatedValue(value);\n}\n/**\n * Replace an `Animated` node in the graph.\n * This is most useful for async updates, which don't cause a re-render.\n */\n\n\nfunction moveChildren(prev, next) {\n  var children = prev.getChildren().slice();\n  children.forEach(function (child) {\n    prev.removeChild(child);\n    next.addChild(child); // Replace `prev` with `next` in child payloads\n\n    var payload = child.getPayload();\n\n    if (is.arr(payload)) {\n      var i = payload.indexOf(prev);\n\n      if (i >= 0) {\n        var copy = _toConsumableArray(payload);\n\n        copy[i] = next;\n        child['payload'] = copy;\n      }\n    } else if (is.obj(payload)) {\n      var entry = Object.entries(payload).find(function (entry) {\n        return entry[1] === prev;\n      });\n\n      if (entry) {\n        child['payload'] = _extends({}, payload, _defineProperty({}, entry[0], next));\n      }\n    }\n  });\n} // Merge updates with the same delay.\n// NOTE: Mutation of `props` may occur!\n\n\nfunction reduceDelays(merged, props) {\n  var prev = merged[props.delay];\n\n  if (prev) {\n    props.to = merge(prev.to, props.to);\n    props.from = merge(prev.from, props.from);\n    Object.assign(prev, props);\n  } else {\n    merged[props.delay] = props;\n  }\n\n  return merged;\n}\n\nfunction merge(dest, src) {\n  return is.obj(dest) && is.obj(src) ? _extends({}, dest, src) : src || dest;\n} // Not all strings can be animated (eg: {display: \"none\"})\n\n\nfunction isAnimatableString(value) {\n  if (!is.str(value)) return false;\n  return value.startsWith('#') || /\\d/.test(value) || !!colorNames[value];\n} // Compute the goal value, converting \"red\" to \"rgba(255, 0, 0, 1)\" in the process\n\n\nfunction computeGoalValue(value) {\n  return is.arr(value) ? value.map(computeGoalValue) : isAnimatableString(value) ? createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nvar interpolate$1 = function interpolate$1(parents, range, output) {\n  return parents && new AnimatedInterpolation(parents, range, output);\n};\n\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n/** API\n *  useChain(references, timeSteps, timeFrame)\n */\n\nfunction useChain(refs, timeSteps, timeFrame) {\n  if (timeFrame === void 0) {\n    timeFrame = 1000;\n  }\n\n  useEffect(function () {\n    if (timeSteps) {\n      var prevDelay = 0;\n      refs.forEach(function (ref, i) {\n        if (!ref.current) return;\n        var controllers = ref.current.controllers;\n\n        if (controllers.length) {\n          var delay = timeFrame * timeSteps[i]; // Use the previous delay if none exists.\n\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          controllers.forEach(function (ctrl) {\n            ctrl.queue.forEach(function (props) {\n              return props.delay += delay;\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      var p = Promise.resolve();\n      refs.forEach(function (ref) {\n        if (!ref.current) return;\n        var _ref$current = ref.current,\n            controllers = _ref$current.controllers,\n            start = _ref$current.start;\n\n        if (controllers.length) {\n          // Take the queue of each controller\n          var updates = controllers.map(function (ctrl) {\n            var q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          }); // Apply the queue when the previous ref stops animating\n\n          p = p.then(function () {\n            controllers.forEach(function (ctrl, i) {\n              var _ctrl$queue;\n\n              return (_ctrl$queue = ctrl.queue).push.apply(_ctrl$queue, _toConsumableArray(updates[i]));\n            });\n            return start();\n          });\n        }\n      });\n    }\n  });\n}\n/** API\n * const props = useSprings(number, [{ ... }, { ... }, ...])\n * const [props, set] = useSprings(number, (i, controller) => ({ ... }))\n */\n\n\nvar useSprings = function useSprings(length, propsArg) {\n  var hasNewSprings = length !== usePrev(length);\n  var isFn = is.fun(propsArg); // The `propsArg` coerced into an array\n\n  var props = isFn ? [] : propsArg; // Recreate the controllers whenever `length` changes\n\n  var springsRef = useRef();\n  var springs = useMemo(function () {\n    return fillArray(length, function (i) {\n      var s = new Controller();\n      var p = props[i] || (props[i] = callProp(propsArg, i, s));\n      return s.update(p);\n    });\n  }, [length]);\n  var ref = springs[0].props.ref;\n\n  var _useMemo = useMemo(function () {\n    return {\n      /** Apply any pending updates */\n      start: function start() {\n        return Promise.all(springsRef.current.map(function (s) {\n          return new Promise(function (done) {\n            return s.start(done);\n          });\n        }));\n      },\n\n      /** Update the spring controllers */\n      update: function update(props) {\n        var isFn = is.fun(props);\n        if (!isFn) props = toArray(props);\n        springsRef.current.forEach(function (spring, i) {\n          spring.update(isFn ? callProp(props, i, spring) : props[i]);\n          if (!ref) spring.start();\n        });\n      },\n\n      /** Stop one key or all keys from animating */\n      stop: function stop() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return springsRef.current.forEach(function (s) {\n          return s.stop.apply(s, args);\n        });\n      }\n    };\n  }, []),\n      start = _useMemo.start,\n      update = _useMemo.update,\n      stop = _useMemo.stop;\n\n  useImperativeHandle(ref, function () {\n    return {\n      start: start,\n      stop: stop\n    };\n  }); // Once mounted, update the local state and start any animations.\n\n  useEffect(function () {\n    if (!isFn || hasNewSprings) {\n      props.forEach(function (p, i) {\n        // Set default props for async updates\n        springs[i].setProp('config', p.config);\n        springs[i].setProp('immediate', p.immediate);\n      });\n    }\n\n    if (hasNewSprings) {\n      if (springsRef.current) {\n        springsRef.current.forEach(function (s) {\n          return s.destroy();\n        });\n      }\n\n      springsRef.current = springs;\n\n      if (!ref) {\n        springs.forEach(function (s) {\n          return s.start();\n        });\n      }\n    } else if (!isFn) {\n      update(props);\n    }\n  }); // Destroy the controllers on unmount\n\n  useEffect(function () {\n    return function () {\n      return springsRef.current.forEach(function (s) {\n        return s.destroy();\n      });\n    };\n  }, []);\n  var values = springs.map(function (s) {\n    return s.animated;\n  });\n  return isFn ? [values, update, stop] : values;\n};\n/** API\n * const props = useSpring({ ... })\n * const [props, set] = useSpring(() => ({ ... }))\n */\n\n\nvar useSpring = function useSpring(props) {\n  var isFn = is.fun(props);\n\n  var _useSprings = useSprings(1, isFn ? props : [props]),\n      result = _useSprings[0],\n      set = _useSprings[1],\n      stop = _useSprings[2];\n\n  return isFn ? [result[0], set, stop] : result;\n};\n/** API\n * const trails = useTrail(number, { ... })\n * const [trails, set] = useTrail(number, () => ({ ... }))\n */\n\n\nvar useTrail = function useTrail(length, propsArg) {\n  var hasNewSprings = length !== usePrev(length);\n  var isFn = is.fun(propsArg); // The `propsArg` coerced into an object\n\n  var props = isFn ? null : propsArg; // Retain the controllers so we can update them.\n\n  var springsRef = useRef([]);\n  var springs = springsRef.current;\n  if (hasNewSprings) springs.length = length; // The controllers are recreated whenever `length` changes.\n\n  var _useSprings = useSprings(length, function (i, spring) {\n    if (isFn && !props) props = callProp(propsArg) || {};\n    springs[i] = spring;\n    return _extends({}, props, {\n      config: callProp(props.config, i),\n      attach: i > 0 && function () {\n        return springs[i - 1];\n      }\n    });\n  }),\n      values = _useSprings[0],\n      animate = _useSprings[1],\n      stop = _useSprings[2];\n  /** For imperative updates to the props of all springs in the trail */\n\n\n  var update = useCallback(function (propsArg) {\n    return animate(function (i, spring) {\n      var props = callProp(propsArg, i, spring) || {};\n      var parent = springsRef.current[props.reverse ? i + 1 : i - 1];\n      return _extends({}, props, {\n        config: callProp(props.config, i),\n        attach: !!parent && function () {\n          return parent;\n        }\n      });\n    });\n  }, []); // Update the animations on re-render when `propsArg` is an object\n  // and the controllers were *not* created in the current render.\n\n  useEffect(function () {\n    if (!isFn && !hasNewSprings) {\n      update(propsArg);\n    }\n  }); // Return the update/stop functions when the `propsArg` is a function.\n\n  return isFn ? [values, update, stop] : values;\n};\n/** API\n * const transitions = useTransition(items, itemKeys, { ... })\n * const [transitions, update] = useTransition(items, itemKeys, () => ({ ... }))\n */\n\n\nvar guid = 0;\nvar INITIAL = 'initial';\nvar ENTER = 'enter';\nvar UPDATE = 'update';\nvar LEAVE = 'leave';\n\nvar makeKeys = function makeKeys(items, keys) {\n  return (typeof keys === 'function' ? items.map(keys) : toArray(keys)).map(String);\n};\n\nvar makeConfig = function makeConfig(props) {\n  var items = props.items,\n      keys = props.keys,\n      rest = _objectWithoutPropertiesLoose(props, [\"items\", \"keys\"]);\n\n  items = toArray(is.und(items) ? null : items);\n  return _extends({\n    items: items,\n    keys: makeKeys(items, keys)\n  }, rest);\n};\n\nfunction useTransition(input, keyTransform, props) {\n  props = makeConfig(_extends({}, props, {\n    items: input,\n    keys: keyTransform || function (i) {\n      return i;\n    }\n  }));\n\n  var _props = props,\n      _props$lazy = _props.lazy,\n      lazy = _props$lazy === void 0 ? false : _props$lazy,\n      _props$unique = _props.unique,\n      from = _props.from,\n      enter = _props.enter,\n      leave = _props.leave,\n      update = _props.update,\n      onDestroyed = _props.onDestroyed,\n      keys = _props.keys,\n      items = _props.items,\n      onFrame = _props.onFrame,\n      _onRest = _props.onRest,\n      onStart = _props.onStart,\n      ref = _props.ref,\n      extra = _objectWithoutPropertiesLoose(_props, [\"lazy\", \"unique\", \"from\", \"enter\", \"leave\", \"update\", \"onDestroyed\", \"keys\", \"items\", \"onFrame\", \"onRest\", \"onStart\", \"ref\"]);\n\n  var forceUpdate = useForceUpdate();\n  var mounted = useRef(false);\n  var state = useRef({\n    mounted: false,\n    first: true,\n    deleted: [],\n    current: {},\n    transitions: [],\n    prevProps: {},\n    paused: !!props.ref,\n    instances: !mounted.current && new Map(),\n    forceUpdate: forceUpdate\n  });\n  useImperativeHandle(props.ref, function () {\n    return {\n      start: function start() {\n        return Promise.all(Array.from(state.current.instances).map(function (_ref) {\n          var c = _ref[1];\n          return new Promise(function (r) {\n            return c.start(r);\n          });\n        }));\n      },\n      stop: function stop(finished) {\n        return Array.from(state.current.instances).forEach(function (_ref2) {\n          var c = _ref2[1];\n          return c.stop(finished);\n        });\n      },\n\n      get controllers() {\n        return Array.from(state.current.instances).map(function (_ref3) {\n          var c = _ref3[1];\n          return c;\n        });\n      }\n\n    };\n  }); // Update state\n\n  state.current = diffItems(state.current, props);\n\n  if (state.current.changed) {\n    // Update state\n    state.current.transitions.forEach(function (transition) {\n      var phase = transition.phase,\n          key = transition.key,\n          item = transition.item,\n          props = transition.props;\n      if (!state.current.instances.has(key)) state.current.instances.set(key, new Controller()); // Avoid calling `onStart` more than once per transition.\n\n      var started = false; // update the map object\n\n      var ctrl = state.current.instances.get(key);\n\n      var itemProps = _extends({}, extra, props, {\n        ref: ref,\n        onRest: function onRest(values) {\n          if (state.current.mounted) {\n            if (transition.destroyed) {\n              // If no ref is given delete destroyed items immediately\n              if (!ref && !lazy) cleanUp(state, key);\n              if (onDestroyed) onDestroyed(item);\n            } // A transition comes to rest once all its springs conclude\n\n\n            var curInstances = Array.from(state.current.instances);\n\n            var _active = curInstances.some(function (_ref4) {\n              var c = _ref4[1];\n              return !c.idle;\n            });\n\n            if (!_active && (ref || lazy) && state.current.deleted.length > 0) {\n              cleanUp(state);\n            }\n\n            if (_onRest) {\n              _onRest(item, phase, values);\n            }\n          }\n        },\n        onFrame: onFrame && function (values) {\n          return onFrame(item, phase, values);\n        },\n        onStart: onStart && function (animation) {\n          return started || (started = (onStart(item, phase, animation), true));\n        } // Update controller\n\n      });\n\n      ctrl.update(itemProps);\n      if (!state.current.paused) ctrl.start();\n    });\n  }\n\n  useEffect(function () {\n    state.current.mounted = mounted.current = true;\n    return function () {\n      state.current.mounted = mounted.current = false;\n      Array.from(state.current.instances).map(function (_ref5) {\n        var c = _ref5[1];\n        return c.destroy();\n      });\n      state.current.instances.clear();\n    };\n  }, []);\n  return state.current.transitions.map(function (_ref6) {\n    var item = _ref6.item,\n        phase = _ref6.phase,\n        key = _ref6.key;\n    return {\n      item: item,\n      key: key,\n      phase: phase,\n      props: state.current.instances.get(key).animated\n    };\n  });\n}\n\nfunction cleanUp(_ref7, filterKey) {\n  var state = _ref7.current;\n  var deleted = state.deleted;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    var _loop2 = function _loop2() {\n      var _ref8 = _step3.value;\n      var key = _ref8.key;\n\n      var filter = function filter(t) {\n        return t.key !== key;\n      };\n\n      if (is.und(filterKey) || filterKey === key) {\n        state.instances.delete(key);\n        state.transitions = state.transitions.filter(filter);\n        state.deleted = state.deleted.filter(filter);\n      }\n    };\n\n    for (var _iterator3 = deleted[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      _loop2();\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  state.forceUpdate();\n}\n\nfunction diffItems(_ref9, props) {\n  var first = _ref9.first,\n      current = _ref9.current,\n      deleted = _ref9.deleted,\n      prevProps = _ref9.prevProps,\n      state = _objectWithoutPropertiesLoose(_ref9, [\"first\", \"current\", \"deleted\", \"prevProps\"]);\n\n  var items = props.items,\n      keys = props.keys,\n      initial = props.initial,\n      from = props.from,\n      enter = props.enter,\n      leave = props.leave,\n      update = props.update,\n      _props$trail = props.trail,\n      trail = _props$trail === void 0 ? 0 : _props$trail,\n      unique = props.unique,\n      config = props.config,\n      _props$order = props.order,\n      order = _props$order === void 0 ? [ENTER, LEAVE, UPDATE] : _props$order;\n\n  var _makeConfig = makeConfig(prevProps),\n      _keys = _makeConfig.keys,\n      _items = _makeConfig.items;\n\n  if (props.reset) {\n    current = {};\n    state.transitions = [];\n  } // Compare next keys with current keys\n\n\n  var currentKeys = Object.keys(current);\n  var currentSet = new Set(currentKeys);\n  var nextSet = new Set(keys);\n  var addedKeys = keys.filter(function (key) {\n    return !currentSet.has(key);\n  });\n  var updatedKeys = update ? keys.filter(function (key) {\n    return currentSet.has(key);\n  }) : [];\n  var deletedKeys = state.transitions.filter(function (t) {\n    return !t.destroyed && !nextSet.has(t.originalKey);\n  }).map(function (t) {\n    return t.originalKey;\n  });\n  var delay = -trail;\n\n  var _loop3 = function _loop3() {\n    var phase = order.shift();\n\n    if (phase === ENTER) {\n      if (first && !is.und(initial)) {\n        phase = INITIAL;\n        from = initial;\n      }\n\n      addedKeys.forEach(function (key) {\n        // In unique mode, remove fading out transitions if their key comes in again\n        if (unique && deleted.find(function (d) {\n          return d.originalKey === key;\n        })) {\n          deleted = deleted.filter(function (t) {\n            return t.originalKey !== key;\n          });\n        }\n\n        var i = keys.indexOf(key);\n        var item = items[i];\n        var enterProps = callProp(enter, item, i);\n        current[key] = {\n          phase: phase,\n          originalKey: key,\n          key: unique ? String(key) : guid++,\n          item: item,\n          props: _extends({\n            delay: delay += trail,\n            config: callProp(config, item, phase),\n            from: callProp(from, item),\n            to: enterProps\n          }, is.obj(enterProps) && interpolateTo(enterProps))\n        };\n      });\n    } else if (phase === LEAVE) {\n      deletedKeys.forEach(function (key) {\n        var i = _keys.indexOf(key);\n\n        var item = _items[i];\n        var leaveProps = callProp(leave, item, i);\n        deleted.push(_extends({}, current[key], {\n          phase: phase,\n          destroyed: true,\n          left: _keys[i - 1],\n          right: _keys[i + 1],\n          props: _extends({\n            delay: delay += trail,\n            config: callProp(config, item, phase),\n            to: leaveProps\n          }, is.obj(leaveProps) && interpolateTo(leaveProps))\n        }));\n        delete current[key];\n      });\n    } else if (phase === UPDATE) {\n      updatedKeys.forEach(function (key) {\n        var i = keys.indexOf(key);\n        var item = items[i];\n        var updateProps = callProp(update, item, i);\n        current[key] = _extends({}, current[key], {\n          phase: phase,\n          props: _extends({\n            delay: delay += trail,\n            config: callProp(config, item, phase),\n            to: updateProps\n          }, is.obj(updateProps) && interpolateTo(updateProps))\n        });\n      });\n    }\n  };\n\n  while (order.length) {\n    _loop3();\n  }\n\n  var out = keys.map(function (key) {\n    return current[key];\n  });\n  out = reconcileDeleted(deleted, out);\n  return _extends({}, state, {\n    first: first && !addedKeys.length,\n    changed: !!(addedKeys.length || deletedKeys.length || updatedKeys.length),\n    transitions: out,\n    current: current,\n    deleted: deleted,\n    prevProps: props\n  });\n}\n\nvar AnimatedStyle =\n/*#__PURE__*/\nfunction (_AnimatedObject2) {\n  _inherits(AnimatedStyle, _AnimatedObject2);\n\n  function AnimatedStyle(style) {\n    var _this14;\n\n    _classCallCheck(this, AnimatedStyle);\n\n    if (style === void 0) {\n      style = {};\n    }\n\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this));\n    _this14.payload = style.transform && createAnimatedTransform ? _extends({}, style, {\n      transform: createAnimatedTransform(style.transform)\n    }) : style;\n    return _this14;\n  }\n\n  return AnimatedStyle;\n}(AnimatedObject); // http://www.w3.org/TR/css3-color/#svg-color\n\n\nvar colors = {\n  transparent: 0x00000000,\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n}; // const INTEGER = '[-+]?\\\\d+';\n\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = NUMBER + '%';\n\nfunction call() {\n  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n    parts[_key] = arguments[_key];\n  }\n\n  return '\\\\(\\\\s*(' + parts.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\nvar rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\nvar rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\nvar hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\nvar hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nvar hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex6 = /^#([0-9a-fA-F]{6})$/;\nvar hex8 = /^#([0-9a-fA-F]{8})$/;\n/*\nhttps://github.com/react-community/normalize-css-color\n\nBSD 3-Clause License\n\nCopyright (c) 2016, React Community\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\nfunction normalizeColor(color) {\n  var match;\n\n  if (typeof color === 'number') {\n    return color >>> 0 === color && color >= 0 && color <= 0xffffffff ? color : null;\n  } // Ordered based on occurrences on Facebook codebase\n\n\n  if (match = hex6.exec(color)) return parseInt(match[1] + 'ff', 16) >>> 0;\n  if (colors.hasOwnProperty(color)) return colors[color];\n\n  if (match = rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | // r\n    parse255(match[2]) << 16 | // g\n    parse255(match[3]) << 8 | // b\n    0x000000ff) >>> // a\n    0;\n  }\n\n  if (match = rgba.exec(color)) {\n    return (parse255(match[1]) << 24 | // r\n    parse255(match[2]) << 16 | // g\n    parse255(match[3]) << 8 | // b\n    parse1(match[4])) >>> // a\n    0;\n  }\n\n  if (match = hex3.exec(color)) {\n    return parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    'ff', // a\n    16) >>> 0;\n  } // https://drafts.csswg.org/css-color-4/#hex-notation\n\n\n  if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n\n  if (match = hex4.exec(color)) {\n    return parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    match[4] + match[4], // a\n    16) >>> 0;\n  }\n\n  if (match = hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | 0x000000ff) >>> // a\n    0;\n  }\n\n  if (match = hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | parse1(match[4])) >>> // a\n    0;\n  }\n\n  return null;\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  var p = 2 * l - q;\n  var r = hue2rgb(p, q, h + 1 / 3);\n  var g = hue2rgb(p, q, h);\n  var b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  var int = parseInt(str, 10);\n  if (int < 0) return 0;\n  if (int > 255) return 255;\n  return int;\n}\n\nfunction parse360(str) {\n  var int = parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  var num = parseFloat(str);\n  if (num < 0) return 0;\n  if (num > 1) return 255;\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  // parseFloat conveniently ignores the final %\n  var int = parseFloat(str);\n  if (int < 0) return 0;\n  if (int > 100) return 1;\n  return int / 100;\n}\n\nfunction colorToRgba(input) {\n  var int32Color = normalizeColor(input);\n  if (int32Color === null) return input;\n  int32Color = int32Color || 0;\n  var r = (int32Color & 0xff000000) >>> 24;\n  var g = (int32Color & 0x00ff0000) >>> 16;\n  var b = (int32Color & 0x0000ff00) >>> 8;\n  var a = (int32Color & 0x000000ff) / 255;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n} // Problem: https://github.com/animatedjs/animated/pull/102\n// Solution: https://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly/658662\n\n\nvar stringShapeRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g; // Covers rgb, rgba, hsl, hsla\n// Taken from https://gist.github.com/olmokramer/82ccce673f86db7cda5e\n\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi; // Covers color names (transparent, blue, etc.)\n\nvar colorNamesRegex = new RegExp(\"(\".concat(Object.keys(colors).join('|'), \")\"), 'g');\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36)           // colors\n *   -45deg                            // values with units\n *   0 2px 2px 0px rgba(0, 0, 0, 0.12) // box shadows\n */\n\nvar createStringInterpolator$1 = function createStringInterpolator$1(config) {\n  // Replace colors with rgba\n  var outputRange = config.output.map(function (rangeValue) {\n    return rangeValue.replace(colorRegex, colorToRgba);\n  }).map(function (rangeValue) {\n    return rangeValue.replace(colorNamesRegex, colorToRgba);\n  });\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      return outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (_value, i) {\n    return createInterpolator(_extends({}, config, {\n      output: outputRanges[i]\n    }));\n  });\n  return function (input) {\n    var i = 0;\n    return outputRange[0] // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    .replace(stringShapeRegex, function () {\n      return interpolations[i++](input);\n    }) // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n    // round the opacity (4th column).\n    .replace(/rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi, function (_, p1, p2, p3, p4) {\n      return \"rgba(\".concat(Math.round(p1), \", \").concat(Math.round(p2), \", \").concat(Math.round(p3), \", \").concat(p4, \")\");\n    });\n  };\n};\n\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\nvar prefixKey = function prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n};\n\nvar prefixes = ['Webkit', 'Ms', 'Moz', 'O'];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce(function (acc, prop) {\n  prefixes.forEach(function (prefix) {\n    return acc[prefixKey(prefix, prop)] = acc[prop];\n  });\n  return acc;\n}, isUnitlessNumber);\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  if (value == null || typeof value === 'boolean' || value === '') return '';\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n\n  return ('' + value).trim();\n}\n\nvar attributeCache = {};\nassign({\n  defaultElement: 'div',\n  createStringInterpolator: createStringInterpolator$1,\n  colorNames: colors,\n  createAnimatedStyle: function createAnimatedStyle(style) {\n    return new AnimatedStyle(style);\n  },\n  applyAnimatedValues: function applyAnimatedValues(instance, props) {\n    if (!instance.nodeType || !instance.setAttribute) {\n      return false;\n    }\n\n    var _ref = props,\n        style = _ref.style,\n        children = _ref.children,\n        scrollTop = _ref.scrollTop,\n        scrollLeft = _ref.scrollLeft,\n        attributes = _objectWithoutPropertiesLoose(_ref, [\"style\", \"children\", \"scrollTop\", \"scrollLeft\"]);\n\n    if (scrollTop !== void 0) instance.scrollTop = scrollTop;\n    if (scrollLeft !== void 0) instance.scrollLeft = scrollLeft; // Set textContent, if children is an animatable value\n\n    if (children !== void 0) instance.textContent = children; // Apply CSS styles\n\n    for (var styleName in style) {\n      if (!style.hasOwnProperty(styleName)) continue;\n      var isCustomProperty = styleName.indexOf('--') === 0;\n      var styleValue = dangerousStyleValue(styleName, style[styleName], isCustomProperty);\n      if (styleName === 'float') styleName = 'cssFloat';\n      if (isCustomProperty) instance.style.setProperty(styleName, styleValue);else instance.style[styleName] = styleValue;\n    }\n\n    var isFilterElement = instance.nodeName === 'filter' || instance.parentNode && instance.parentNode.nodeName === 'filter'; // Apply DOM attributes\n\n    for (var name in attributes) {\n      // Attributes are written in dash case\n      var attributeName = isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, function (n) {\n        return '-' + n.toLowerCase();\n      }));\n      instance.setAttribute(attributeName, attributes[name]);\n    }\n  }\n});\n\nfunction Spring(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var spring = useSpring(props);\n  return children(spring);\n}\n\nfunction Trail(_ref2) {\n  var items = _ref2.items,\n      children = _ref2.children,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"items\", \"children\"]);\n\n  var trails = useTrail(items.length, props);\n  return items.map(function (item, index) {\n    return children(item)(trails[index]);\n  });\n}\n\nfunction Transition(_ref3) {\n  var items = _ref3.items,\n      _ref3$keys = _ref3.keys,\n      keys = _ref3$keys === void 0 ? null : _ref3$keys,\n      children = _ref3.children,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"items\", \"keys\", \"children\"]);\n\n  var transitions = useTransition(items, keys, props);\n  return transitions.map(function (_ref4, index) {\n    var item = _ref4.item,\n        key = _ref4.key,\n        props = _ref4.props,\n        slot = _ref4.slot;\n    var el = children(item, slot, index)(props);\n    return React.createElement(el.type, _extends({\n      key: key\n    }, el.props));\n  });\n}\n\nvar domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG\n'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan']; // Extend animated with all the available THREE elements\n\nvar domAnimated = withExtend(createAnimatedComponent).extend(domElements);\n/** @deprecated Use `animated.extend` instead */\n\nvar apply = domAnimated.extend;\nexport { apply, config, domAnimated as animated, domAnimated as a, interpolate$1 as interpolate, Controller, Globals, useSpring, useTrail, useTransition, useChain, useSprings, Spring, Trail, Transition };","map":null,"metadata":{},"sourceType":"module"}